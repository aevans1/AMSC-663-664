function histogram_test(atlas_data,transition_params)
%atlas_data is struct with fields
%new_S - new_S from construction.m output, struct of atlas simulator
%L - array of landmarks for atlas corresponding to new_S
%params - setup parameters for atlas, genereated in atlas_driver.m
%('current_atlas.mat' has fields new_S,L from most recent construction.m
%call
%('current_driver.mat' has params struct from most recent current_driver
%call)

%TODO: comments
%general tool for calculating transition paths from atlas output and comparing
%with the original simulator

%NOTE: user can input atlas data and params for this function,
%	or can run it
%with no parameters and have last run atlas .mat files loaded instead

%%%Allow parameter inputs to construcion or load up saved inputs
if ~exist('atlas_data','var')
    try
        fprintf("No input parameters for atlas_data, attempting to load saved params in current_atlas.mat and current_driver.mat \n");
        atlas_data = load('current_atlas.mat');
        data = load('current_driver.mat');
    catch
        fprintf("Error: No saved atlas under current_atlas.mat or current_driver.mat, please generate atlas in construction.m or atlas_driver.m \n");
        return;
    end
end
new_S = atlas_data.new_S;
L = atlas_data.L;
params = data.params;

%%%Check that param struct has non-empty fields
fields = {'S','delta','rho','m','p','t0','d','net_info'};
for i = 1 : length(fields)
    if isempty(getfield(params,fields{i}))
        fprintf("Error: params.%s is empty, please re-initialize param struct with %s value \n", fields{i},fields{i});
        return;
    end
end

%%%Read in delta-net parameters
net_info = params.net_info;
net = net_info.net;
neighbors = net_info.neighbors;
edges = net_info.edges;
deg = net_info.deg;
max_deg = net_info.max_deg;

%%%Read in atlas parameters
delta = params.delta;
d = params.d;
dt = params.dt;
rho = params.rho;
m = params.m;
f = params.f;
dt_sim = params.dt_sim;
S = params.S;


%%%Plot delta-net

%find ambient space dimension
%each column of net is a data point in R^D
D = size(net,1);
if D == 2 || D == 3
    plot_delta_net(net,edges,D);
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%Define transition regions

%%%Allow parameter inputs to construcion or load up saved inputs
if ~exist('transition_params','var')
    try
        fprintf("No input parameters for transition_params, attempting to load saved params in transition_params.mat \n");
        transition_params = load('transition_params.mat');
    catch
        fprintf("Error: No saved transition parameters under transition_params.mat \n");
        return;
    end
end

%NOTE: including Xzero as a user defined param
%in general, user may want to do several different Xzeros, use a random one,
%but for now assuming that one initial Xzero is fine

%TEMPORARY
regions = transition_params.regions;
dist = transition_params.dist;
dist_sq = dist.^2;
Xzero = transition_params.Xzero;
T = transition_params.T;

%TODO: for more general simulations, use run_opts to specify, e.g: run for
%certain number of transitions rather than certain time
%run_opts = transition_params.run_opts;

%%Assign net points to regions, if within prescribed distance
region_net = zeros(size(net,2),1);
for n = 1 : size(net,2)
    [dmin,imin] = min(sum((net(:,n) - regions).^2,1));
    if dmin < dist_sq
        region_net(n) = imin;
    end
end

num_steps = floor(T/dt_sim);

%% LABEL THIS
%For histogramming

num_paths = 10000;

%%%TODO: vary number of locations?
%num_locations = 1;
%%%
path_time = 3.27;


Xzero = 0.2;
X_collection = []; %initialize collection of binned original simulator values
%% Run for original simulator
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Original Simulator
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fprintf("Simulating original paths\n");

[X,~,~] = S(Xzero,num_paths,path_time);

X_delta = [];
for i = 1:num_paths
    [~,imin] = min(sum((X(:,i) - net).^2,1));
    X_delta(:,i) = net(:,imin);
end
X_collection(:,1:num_paths) = X_delta;




%% Run for learned simulator
num_steps = floor(T/dt);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Learned Simulator
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Y_collection = [];
Y_delta = [];
%%%Find the initial chart to start reduced simulator
[~,init_chart] = min(sum((Xzero - net).^2,1));
num_nbr = deg(init_chart);
init_L = L(:,1:(m+1)*(num_nbr + 1),init_chart);

%%%Embed initial condition for original simulator,center,then run atlas simulator
[local_L,Yzero] = LMDS(init_L,Xzero,rho,d);
Yzero = Yzero - local_L(:,1);
%%
fprintf("Simulating atlas paths\n");

%%%%simulate one long trajectory [0,T] and calculate transitions
[~,chart_end,~,~] = learned_simulator(Yzero,num_paths,dt,path_time,new_S,neighbors,deg,d,delta,net,init_chart);

for i = 1:num_paths
    Y_delta(:,i) = net(:,chart_end(i));
end

Y_collection(:,1:num_paths) = Y_delta;

%%%for 1D case only right now
%%
edges = [-0.5:delta:1.5];
figure;

mu = histogram(X_collection,edges);
hold on;
mu_hat = histogram(Y_,edges);
legend('Original','ATLAS');



end

