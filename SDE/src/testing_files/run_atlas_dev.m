function test_learned_simulator_test_2D()
%TODO: comments

setting = 'transition_paths';
if ~exist('setting','var'), setting = 'sim_compare'; end

%setting_str = sprintf("%s",setting);
%filename =[datestr(now, 'dd_mmm_yyyy_HH_MM'),'_','d',num2str(d),'_','learned_simulator_test','_',setting];
%fileID = fopen([filename,'.txt'],'w');

seed = 1;
rng(seed);
fprintf("Temporary: setting seed \n");
fprintf("Seed: %d \n",seed);

data = load('current_atlas.mat');
new_S = data.new_S;
L = data.L;

data = load('current_atlas_driver.mat');
params = data.params;

net_info = params.net_info;
net = net_info.net;
neighbors = net_info.neighbors;
edges = net_info.edges;
deg = net_info.deg;
max_deg = net_info.max_deg;

delta = params.delta;
d = params.d;
dt = params.dt;
rho = params.rho;
m = params.m;
f = params.f;
dt_original = params.dt_original;
S = params.S;

figure(1); clf; hold on;
%contour(xgrid,ygrid,Ugrid,linspace(0,3.7,20),'Linewidth',1);
xlabel('x','Fontsize',20);
ylabel('y','Fontsize',20);
set(gca,'Fontsize',20);
for i = 1 : length(edges)
    plot([net(1,edges(i,1)),net(1,edges(i,2))],[net(2,edges(i,1)),net(2,edges(i,2))],'color','k','LineWidth',2);
end
drawnow;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%NOTE: this is the main test file for comparing simulators
%Data generated by this file should be used by a number of other test files,
%one for transition paths, one for histograms...etc

p = 1;
T = 10000;

fprintf("Transition path tracking \n");
global p1 p2 p3
p1 = [0;0];
p2 = [1.5;0];
p3 = [0.8;1.05];
regions = [p1,p2,p3];
dist = 0.25;
dist_sq = dist.^2;

%%%Initial simulation point
Xzero = net(:,1);

%%%Assign net points to closest region, if within presciribed distance
region_net = zeros(size(net,2),1);
for n = 1 : size(net,2)
	[dmin,imin] = min(sum((net(:,n) - regions).^2,1));
	if dmin < dist_sq
		region_net(n) = imin;
	end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Original Simulator
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
[~,~,X] = S(Xzero,p,T);

original_switches = switch_data(X,regions,dist,dt_original,T);

save('original_tswitch.mat','original_switches');
fprintf("X paths are simulated! \n");
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Reduced(ATLAS) Simulator
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%Find the initial chart to start reduced simulator
[~,init_chart] = min(sum((Xzero - net).^2,1));
num_nbr = deg(init_chart);
init_L = L(:,1:(m+1)*(num_nbr + 1),init_chart);

%%%Embed initial condition for original simulator,center,then run atlas simulator
fprintf("TESTING: using prof. cameron LMDS \n");
%[local_L,Yzero] = LMDS(init_L,Xzero,rho,d);
[local_L,Yzero] = cameron_LMDS(init_L,Xzero,d);
Yzero = Yzero - local_L(:,1);
[~,~,Y,charts] = new_learned_simulator(Yzero,p,dt,T,new_S,neighbors,deg,d,delta,net,init_chart);

fprintf("Y paths are simulated! \n");

%%%Bin the chart list into respective regions, assign 0 if no region
num_steps = length(charts);
paths = zeros(1,num_steps);
for n = 1:num_steps
    paths(n) = region_net(charts(n));
end

learned_switches = calculate_switches(paths,dt,num_steps);
save('learned_tswitch.mat','learned_switches');
plot(net(1,charts),net(2,charts),'.','color','y','Markersize',20);

%%%If setting is 'sim_compare', plot histogram,s if 'transition_paths' plot
%expected transition times between regions
%switch setting
%    case 'sim_compare'
%        edges = [-0.5:delta:1.5];
%        
%        figure;
%        mu_hat = histogram(Y_delta,edges);
%        hold on;
%        
%        mu = histogram(X_delta,edges);
%        legend('reduced_sim','original_sim');
%        
%    case 'transition_paths'
%        %applies for either of example 1 or 2
%        %TODO: print statement with example number, relevant parameters, etc.
%        %TODO: more robust outputs
%        X_switch_bar = X_switch_averages.';
%        X_switch_bar = X_switch_bar(:);
%		X_switch_bar = X_switch_bar(X_switch_bar>0);
%        Y_switch_bar = Y_switch_averages.';
%        Y_switch_bar = Y_switch_bar(:);
%		Y_switch_bar = Y_switch_bar(Y_switch_bar > 0);
%
%        figure;
%		clf;
%        hold on;
%        bar([X_switch_bar,Y_switch_bar]);
%		xticks([1:6]);
%        xticklabels({'1->2','1->3','2->1','2->3','3->1','3->2'});
%        set(gca,'Fontsize',20);
%        ylabel('Mean transition time','Fontsize',20);
%		
%		%Plot visited paths on delta net
%        x_init = [-1:0.01:2.5];
%        y_init = [-1:0.01:2];
%        [X,Y] = meshgrid(x_init,y_init);
%        %%
%        figure; hold on;
%        
%        for n = 1:size(net,2)
%            nbrs = neighbors(n).nbr;
%            num_nbr = size(nbrs,2);
%            for k = 1:num_nbr
%                nbr = nbrs(k);
%                plot([ net(1,n),net(1,nbr)],[net(2,n),net(2,nbr)],'-o','Color','k','MarkerFaceColor','b');
%            end
%        end
%		charts_visited = unique(chart);	
%		for n = 1:length(charts_visited)
%			plot([ net(1,n),net(1,n)],[net(2,n),net(2,n)],'-o','Color','r','MarkerFaceColor','r');
%		end	
%	end
%hold off;

%TODO: figure out how to do this better
%%%Print relevant data to text file
%fprintf(fileID,'example: %d\n',example);
%fprintf(fileID,'\n');
%fprintf(fileID,'delta=%f\n',delta);
%fprintf(fileID,'m=%d\n',m);
%fprintf(fileID,'t_0=%f\n',t_0);
%fprintf(fileID,'dt(ATLAS)=%f\n',dt);
%fprintf(fileID,'dt(original)=%f\n',dt_original);
%fprintf(fileID,'p=%d\n',p);
%fprintf(fileID,'T=%f\n',T);
%fprintf(fileID,'\n');
%fprintf(fileID,"Parameters from simulator testing: \n");
%fprintf(fileID,'regions = %d\n',regions);
%fprintf(fileID,'dist=%f\n',dist);
%%fprintf(fileID,'num_locations=%d\n',num_locations);
%
%save(filename);
%fclose(fileID);
end

function [switch_times,paths] = switch_data(X,regions,dist,dt,T)
%TODO:comment
%Given trajectory data, calculates paths among regions list,
%finds switch_times betwen regions
num_steps = floor(T/dt);
dist_sq = dist^2;
paths = zeros(1,num_steps);
for n = 1:num_steps
	[dmin,imin] = min(sum((regions - X(:,n)).^2,1));
	if dmin < dist_sq
		paths(n) = imin;
	else
		paths(n) = 0;
	end
end
switch_times = calculate_switches(paths,dt,num_steps);
end

function switch_times = calculate_switches(paths,dt,num_steps)
%TODO:comment, use transition data file
switch_times=[];
ind = paths(1);
flag = sign(ind);
t = 0;
for n = 1:num_steps
   new_ind = paths(n);
   if new_ind > 0
       if flag == 0
           ind = new_ind;
           t = 0;
           flag = 1;
       end
   end
   if flag == 1
       if new_ind > 0 && new_ind ~= ind
           switch_times = [switch_times;ind,new_ind,t];
           t = 0;
           ind = new_ind;
       end
   end
   t = t+dt;
end
end

function [position,isterminal,direction] = events(t,x)
global p1 p2 p3
position = max(0,min([norm(x - p1),norm(x - p2),norm(x - p3)]) - 0.1);
isterminal = 1; % terminate integration
direction = 0;
end


