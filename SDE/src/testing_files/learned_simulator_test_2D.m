%NOTE: this is the main test file for comparing simulators
%Data generated by this file should be used by a number of other test files,
%one for transition paths, one for histograms...etc

setting = 'transition_paths';
%%%TESTING: binning for original simulator
if ~exist('setting','var'), setting = 'sim_compare'; end

setting_str = sprintf("%s",setting);
filename =[datestr(now, 'dd_mmm_yyyy_HH_MM'),'_','d',num2str(d),'_','learned_simulator_test','_',setting];
fileID = fopen([filename,'.txt'],'w');

fprintf("Temporary: setting seed \n");
seed = 1;
fprintf("Seed: %d \n",seed);

rng(seed);
p = 1;
T = 500;

%TESTING
fprintf("Testing transition path tracking \n");
%NOTE: both of these parameters are very problem dependent
%TODO: move these params to another file?
p1 = [0;0];
p2 = [1.5;0];
p3 = [0.8;1.05];
regions = [p1,p2,p3];
dist = (1/4);

Y_switch_times = repmat(struct('list',[]),length(regions),length(regions));
X_switch_times = repmat(struct('list',[]),length(regions),length(regions));

%%%Initial simulation point
Xzero = net(:,1);

%%%Assign net points to closests region, if within presciribed distance
T_net = 100;
region_net = zeros(size(net,2),1);
for n = 1 : size(net,2)
	X_end = simulator(Xzero,1,T_net,f,dt_original);
	[dmin,imin] = min(sum(abs(X_end - regions).^2,1));	
	if sqrt(dmin) < dist
		region_net(n) = imin;
	end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Original Simulator
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%Simulate X paths
[~,~,X] = simulator(Xzero,1,T,f,dt_original,regions,dist);
%%%bin the endpoints into delta net, collect data
X_delta = zeros(d,size(X,2));
X_regions_visited = zeros(size(X,2),1);
for i = 1:size(X,2)	
	sqdist = abs(X(:,i) - net).^2;
	[~,j] = min(sum(sqdist,1)); 
	X_delta(:,i) = net(:,j);
	X_regions_visited(i) = region_net(j);
end

%%%Collect transition data between regions of interest
[X_switch_times] = transition_data(regions,X_regions_visited,dt_original);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Reduced(ATLAS) Simulator
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%Simulate Y paths
%Find the initial start to start reduced simulator
sqdist = (Xzero - net).^2;
[~,init_chart] = min(sum(sqdist,1));
%

%%%%%%%%%%%%%%%%%%%%%%%%
%TESTING: comment out line below if no LMDS
%% 	Embed initial condition for original simulator so it can berun in reduced
%% 	simulator
%[local_L,Yzero] = LMDS(L(init_chart).L,Xzero,rho,d);
%
%% 	Center projected point around the chart center
%Yzero = Yzero - local_L(:,1);

%for no LMDS, use orginal Xzero
Yzero = Xzero;
%%%%%%%%%%%%%%%%%%%%%%%%
[~,~,Y,chart] =learned_simulator(Yzero,p,dt,T,new_S,neighbors,d,delta,net,init_chart);

%%%%%Map reduced sim paths back to delta net in original space
Y_delta = zeros(d,size(Y,2));
Y_regions_visited = zeros(size(Y,2),1);
for i = 1:size(Y,2)
    Y_delta(:,i) = net(:,chart(i));
	Y_regions_visited(i) = region_net(chart(i));
end

%%%%Collect transition data between regions of interest
[Y_switch_times] = transition_data(regions,Y_regions_visited,dt);

%%%Collect all average transitions for simulators
for i = 1:length(regions)
    for j = i + 1: length(regions)
        X_switch_averages(i,j) = mean(X_switch_times(i,j).list);
        X_switch_averages(j,i) = mean(X_switch_times(j,i).list);
        Y_switch_averages(i,j) = mean(Y_switch_times(i,j).list);
        Y_switch_averages(j,i) = mean(Y_switch_times(j,i).list);
    end
end
%%%If setting is 'sim_compare', plot histogram,s if 'transition_paths' plot
%expected transition times between regions
switch setting
    case 'sim_compare'
        edges = [-0.5:delta:1.5];
        
        figure;
        mu_hat = histogram(Y_delta,edges);
        hold on;
        
        mu = histogram(X_delta,edges);
        legend('reduced_sim','original_sim');
        
    case 'transition_paths'
        %applies for either of example 1 or 2
        %TODO: print statement with example number, relevant parameters, etc.
        %TODO: more robust outputs
        X_switch_bar = X_switch_averages.';
        X_switch_bar = X_switch_bar(:);
		X_switch_bar = X_switch_bar(X_switch_bar>0);
        Y_switch_bar = Y_switch_averages.';
        Y_switch_bar = Y_switch_bar(:);
		Y_switch_bar = Y_switch_bar(Y_switch_bar > 0);

        figure;
		clf;
        hold on;
        bar([X_switch_bar,Y_switch_bar]);
		xticks([1:6]);
        xticklabels({'1->2','1->3','2->1','2->3','3->1','3->2'});
        set(gca,'Fontsize',20);
        ylabel('Mean transition time','Fontsize',20);
        
        %Plot visited paths on delta net
        x_init = [-1:0.01:2.5];
        y_init = [-1:0.01:2];
        [X,Y] = meshgrid(x_init,y_init);
        %%
        figure; hold on;
        
        for n = 1:size(net,2)
            nbrs = neighbors(n).nbr;
            num_nbr = size(nbrs,2);
            for i = 1:num_nbr
                nbr = nbrs(i);
                plot([ net(1,n),net(1,nbr)],[net(2,n),net(2,nbr)],'-o','Color','k','MarkerFaceColor','b');
            end
        end
		charts_visited = unique(chart);	
		for n = 1:length(charts_visited)
			plot([ net(1,n),net(1,n)],[net(2,n),net(2,n)],'-o','Color','r','MarkerFaceColor','r');
		end	
	end
hold off;

%TODO: figure out how to do this better
%%%Print relevant data to text file
fprintf(fileID,'example: %d\n',example);
fprintf(fileID,'\n');
fprintf(fileID,'delta=%f\n',delta);
fprintf(fileID,'m=%d\n',m);
fprintf(fileID,'t_0=%f\n',t_0);
fprintf(fileID,'dt(ATLAS)=%f\n',dt);
fprintf(fileID,'dt(original)=%f\n',dt_original);
fprintf(fileID,'p=%d\n',p);
fprintf(fileID,'T=%f\n',T);
fprintf(fileID,'\n');
fprintf(fileID,"Parameters from simulator testing: \n");
fprintf(fileID,'regions = %d\n',regions);
fprintf(fileID,'dist=%f\n',dist);
%fprintf(fileID,'num_locations=%d\n',num_locations);

save(filename);
fclose(fileID);
