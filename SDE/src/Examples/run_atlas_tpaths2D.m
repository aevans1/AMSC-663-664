function run_atlas_tpaths2D()
%TODO: comments

data = load('current_atlas.mat');
new_S = data.new_S;
L = data.L;

data = load('current_driver.mat');
params = data.params;

net_info = params.net_info;
net = net_info.net;
neighbors = net_info.neighbors;
edges = net_info.edges;
deg = net_info.deg;
max_deg = net_info.max_deg;

delta = params.delta;
d = params.d;
dt = params.dt;
rho = params.rho;
m = params.m;
f = params.f;
dt_sim = params.dt_sim;
S = params.S;

figure(1); clf; hold on;
%contour(xgrid,ygrid,Ugrid,linspace(0,3.7,20),'Linewidth',1);
xlabel('x','Fontsize',20);
ylabel('y','Fontsize',20);
set(gca,'Fontsize',20);
for i = 1 : length(edges)
    plot([net(1,edges(i,1)),net(1,edges(i,2))],[net(2,edges(i,1)),net(2,edges(i,2))],'color','k','LineWidth',2);
end
drawnow;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%NOTE: this is the main test file for comparing simulators
%Data generated by this file should be used by a number of other test files,
%one for transition paths, one for histograms...etc

p = 1;
T = 10000;

fprintf("Transition path tracking \n");
global p1 p2 p3
p1 = [0;0];
p2 = [1.5;0];
p3 = [0.8;1.05];
regions = [p1,p2,p3];
dist = 0.25;
dist_sq = dist.^2;

%%%Initial simulation point
Xzero = net(:,1);

%%%Assign net points to closest region, if within presciribed distance
region_net = zeros(size(net,2),1);
for n = 1 : size(net,2)
	[dmin,imin] = min(sum((net(:,n) - regions).^2,1));
	if dmin < dist_sq
		region_net(n) = imin;
	end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Original Simulator
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
[~,~,X] = S(Xzero,p,T);

fprintf("Simulating original paths\n");

original_switches = switch_data(X,regions,dist,dt_sim,T);

fprintf("original paths are simulated! \n");
save('original_tswitch.mat','original_switches');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Reduced(ATLAS) Simulator
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%Find the initial chart to start reduced simulator
[~,init_chart] = min(sum((Xzero - net).^2,1));
num_nbr = deg(init_chart);
init_L = L(:,1:(m+1)*(num_nbr + 1),init_chart);

%%%Embed initial condition for original simulator,center,then run atlas simulator
%fprintf("TESTING: using prof. cameron LMDS \n");
[local_L,Yzero] = LMDS(init_L,Xzero,rho,d);
Yzero = Yzero - local_L(:,1);

fprintf("simulating atlas paths\n");

[~,~,Y,charts] = learned_simulator(Yzero,p,dt,T,new_S,neighbors,deg,d,delta,net,init_chart);

fprintf("atlas paths are simulated! \n");

%%%Bin the chart list into respective regions, assign 0 if no region
num_steps = length(charts);
paths = zeros(1,num_steps);
for n = 1:num_steps
    paths(n) = region_net(charts(n));
end

learned_switches = calculate_switches(paths,dt,num_steps);
save('learned_tswitch.mat','learned_switches');
plot(net(1,charts),net(2,charts),'.','color','y','Markersize',20);
end

function [switch_times,paths] = switch_data(X,regions,dist,dt,T)
%TODO:comment
%Given trajectory data, calculates paths among regions list,
%finds switch_times betwen regions

num_steps = floor(T/dt);
dist_sq = dist^2;
paths = zeros(1,num_steps);
for n = 1:num_steps
	[dmin,imin] = min(sum((regions - X(:,n)).^2,1));
	if dmin < dist_sq
		paths(n) = imin;
	else
		paths(n) = 0;
	end
end
switch_times = calculate_switches(paths,dt,num_steps);
end

function switch_times = calculate_switches(paths,dt,num_steps)
%TODO:comment, use transition data file

switch_times=[];
ind = paths(1);
flag = sign(ind);
t = 0;
for n = 1:num_steps
   new_ind = paths(n);
   if new_ind > 0
       if flag == 0
           ind = new_ind;
           t = 0;
           flag = 1;
       end
   end
   if flag == 1
       if new_ind > 0 && new_ind ~= ind
           switch_times = [switch_times;ind,new_ind,t];
           t = 0;
           ind = new_ind;
       end
   end
   t = t+dt;
end
end

